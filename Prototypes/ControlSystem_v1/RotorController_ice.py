# -*- coding: utf-8 -*-
# **********************************************************************
#
# Copyright (c) 2003-2018 ZeroC, Inc. All rights reserved.
#
# This copy of Ice is licensed to you under the terms described in the
# ICE_LICENSE file included in this distribution.
#
# **********************************************************************
#
# Ice version 3.6.5
#
# <auto-generated>
#
# Generated from file `RotorController.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module RotorModule
_M_RotorModule = Ice.openModule('RotorModule')
__name__ = 'RotorModule'

if 'Rotor' not in _M_RotorModule.__dict__:
    _M_RotorModule.Rotor = Ice.createTempClass()
    class Rotor(Ice.Object):
        def __init__(self):
            if Ice.getType(self) == _M_RotorModule.Rotor:
                raise RuntimeError('RotorModule.Rotor is an abstract class')

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::RotorModule::Rotor')

        def ice_id(self, current=None):
            return '::RotorModule::Rotor'

        def ice_staticId():
            return '::RotorModule::Rotor'
        ice_staticId = staticmethod(ice_staticId)

        def gotoAziAlt(self, azi, alt, current=None):
            """
            Commands the rotor to go to a given Azimuth/Altitude
            Arguments:
            azi -- 
            alt -- 
            current -- The Current object for the invocation.
            """
            pass

        def getCurrentPos(self, current=None):
            """
            Retrieves the current position of the rotors as a pair of coordinates.
            Returned as a string of the following form: "AZ=aaa EL=eee"
            Arguments:
            current -- The Current object for the invocation.
            """
            pass

        def stop(self, current=None):
            """
            Stops any ongoing command. (e.g: movement)
            Arguments:
            current -- The Current object for the invocation.
            """
            pass

        def __str__(self):
            return IcePy.stringify(self, _M_RotorModule._t_Rotor)

        __repr__ = __str__

    _M_RotorModule.RotorPrx = Ice.createTempClass()
    class RotorPrx(Ice.ObjectPrx):

        """
        Commands the rotor to go to a given Azimuth/Altitude
        Arguments:
        azi -- 
        alt -- 
        _ctx -- The request context for the invocation.
        """
        def gotoAziAlt(self, azi, alt, _ctx=None):
            return _M_RotorModule.Rotor._op_gotoAziAlt.invoke(self, ((azi, alt), _ctx))

        """
        Commands the rotor to go to a given Azimuth/Altitude
        Arguments:
        azi -- 
        alt -- 
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        _ctx -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation.
        """
        def begin_gotoAziAlt(self, azi, alt, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_RotorModule.Rotor._op_gotoAziAlt.begin(self, ((azi, alt), _response, _ex, _sent, _ctx))

        """
        Commands the rotor to go to a given Azimuth/Altitude
        Arguments:
        azi -- 
        alt -- 
        """
        def end_gotoAziAlt(self, _r):
            return _M_RotorModule.Rotor._op_gotoAziAlt.end(self, _r)

        """
        Retrieves the current position of the rotors as a pair of coordinates.
        Returned as a string of the following form: "AZ=aaa EL=eee"
        Arguments:
        _ctx -- The request context for the invocation.
        """
        def getCurrentPos(self, _ctx=None):
            return _M_RotorModule.Rotor._op_getCurrentPos.invoke(self, ((), _ctx))

        """
        Retrieves the current position of the rotors as a pair of coordinates.
        Returned as a string of the following form: "AZ=aaa EL=eee"
        Arguments:
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        _ctx -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation.
        """
        def begin_getCurrentPos(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_RotorModule.Rotor._op_getCurrentPos.begin(self, ((), _response, _ex, _sent, _ctx))

        """
        Retrieves the current position of the rotors as a pair of coordinates.
        Returned as a string of the following form: "AZ=aaa EL=eee"
        Arguments:
        """
        def end_getCurrentPos(self, _r):
            return _M_RotorModule.Rotor._op_getCurrentPos.end(self, _r)

        """
        Stops any ongoing command. (e.g: movement)
        Arguments:
        _ctx -- The request context for the invocation.
        """
        def stop(self, _ctx=None):
            return _M_RotorModule.Rotor._op_stop.invoke(self, ((), _ctx))

        """
        Stops any ongoing command. (e.g: movement)
        Arguments:
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        _ctx -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation.
        """
        def begin_stop(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_RotorModule.Rotor._op_stop.begin(self, ((), _response, _ex, _sent, _ctx))

        """
        Stops any ongoing command. (e.g: movement)
        Arguments:
        """
        def end_stop(self, _r):
            return _M_RotorModule.Rotor._op_stop.end(self, _r)

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_RotorModule.RotorPrx.ice_checkedCast(proxy, '::RotorModule::Rotor', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_RotorModule.RotorPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

        def ice_staticId():
            return '::RotorModule::Rotor'
        ice_staticId = staticmethod(ice_staticId)

    _M_RotorModule._t_RotorPrx = IcePy.defineProxy('::RotorModule::Rotor', RotorPrx)

    _M_RotorModule._t_Rotor = IcePy.defineClass('::RotorModule::Rotor', Rotor, -1, (), True, False, None, (), ())
    Rotor._ice_type = _M_RotorModule._t_Rotor

    Rotor._op_gotoAziAlt = IcePy.Operation('gotoAziAlt', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_float, False, 0), ((), IcePy._t_float, False, 0)), (), None, ())
    Rotor._op_getCurrentPos = IcePy.Operation('getCurrentPos', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_string, False, 0), ())
    Rotor._op_stop = IcePy.Operation('stop', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())

    _M_RotorModule.Rotor = Rotor
    del Rotor

    _M_RotorModule.RotorPrx = RotorPrx
    del RotorPrx

# End of module RotorModule
