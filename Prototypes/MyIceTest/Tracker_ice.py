# -*- coding: utf-8 -*-
# **********************************************************************
#
# Copyright (c) 2003-2018 ZeroC, Inc. All rights reserved.
#
# This copy of Ice is licensed to you under the terms described in the
# ICE_LICENSE file included in this distribution.
#
# **********************************************************************
#
# Ice version 3.6.5
#
# <auto-generated>
#
# Generated from file `Tracker.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module MyDemo
_M_MyDemo = Ice.openModule('MyDemo')
__name__ = 'MyDemo'

if 'Tracker' not in _M_MyDemo.__dict__:
    _M_MyDemo.Tracker = Ice.createTempClass()
    class Tracker(Ice.Object):
        def __init__(self):
            if Ice.getType(self) == _M_MyDemo.Tracker:
                raise RuntimeError('MyDemo.Tracker is an abstract class')

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::MyDemo::Tracker')

        def ice_id(self, current=None):
            return '::MyDemo::Tracker'

        def ice_staticId():
            return '::MyDemo::Tracker'
        ice_staticId = staticmethod(ice_staticId)

        def getString(self, current=None):
            pass

        def __str__(self):
            return IcePy.stringify(self, _M_MyDemo._t_Tracker)

        __repr__ = __str__

    _M_MyDemo.TrackerPrx = Ice.createTempClass()
    class TrackerPrx(Ice.ObjectPrx):

        def getString(self, _ctx=None):
            return _M_MyDemo.Tracker._op_getString.invoke(self, ((), _ctx))

        def begin_getString(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_MyDemo.Tracker._op_getString.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_getString(self, _r):
            return _M_MyDemo.Tracker._op_getString.end(self, _r)

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_MyDemo.TrackerPrx.ice_checkedCast(proxy, '::MyDemo::Tracker', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_MyDemo.TrackerPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

        def ice_staticId():
            return '::MyDemo::Tracker'
        ice_staticId = staticmethod(ice_staticId)

    _M_MyDemo._t_TrackerPrx = IcePy.defineProxy('::MyDemo::Tracker', TrackerPrx)

    _M_MyDemo._t_Tracker = IcePy.defineClass('::MyDemo::Tracker', Tracker, -1, (), True, False, None, (), ())
    Tracker._ice_type = _M_MyDemo._t_Tracker

    Tracker._op_getString = IcePy.Operation('getString', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_string, False, 0), ())

    _M_MyDemo.Tracker = Tracker
    del Tracker

    _M_MyDemo.TrackerPrx = TrackerPrx
    del TrackerPrx

# End of module MyDemo
